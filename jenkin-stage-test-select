pipeline {
  agent none
  options {
    disableConcurrentBuilds()
    timeout(time: 12, unit: 'HOURS')
    timestamps()
    ansiColor('xterm')
  }
  environment {
    wipeStageDatabase = false
  }
  parameters {
    booleanParam(name: 'deployToTest', defaultValue: false, description: 'Deploy to Test environment?')
    booleanParam(name: 'deployToStage', defaultValue: false, description: 'Deploy to Stage environment?')
    booleanParam(defaultValue: false, description: 'Wipe stage database?', name: 'wipeStageDatabase')
  }
  stages {
    stage('Prepare') {
      when {
        branch 'development'
      }
      steps {
        script {
          branchName = getBranchName()
          appVersion = getAppVersionWithBranchName()
        }
      }
    }
    stage('Unit tests') {
      when {
        branch 'development'
        beforeAgent true
      }
      agent {
        label 'docker'
      }
      options {
        timeout(time: 2, unit: 'HOURS')
      }
      steps {
        sh "docker build -f Dockerfile.maven -t local/maven ."
        sh "docker run --name maven local/maven mvn test"
      }
      post {
        always {
          sh "docker cp maven:/work/target highwire-unit-tests || exit 0"
          sh "docker rm maven"
          archiveArtifacts artifacts: 'highwire-unit-tests/**', fingerprint: false
          junit 'highwire-unit-tests/surefire-reports/*.xml'
        }
        failure {
          script {
            if("${env.BRANCH_NAME}" == 'master' || "${env.BRANCH_NAME}" == 'development' || "${env.BRANCH_NAME}" == 'release') {
              office365ConnectorSend message: "Unit Tests Failed! ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
            }
          }
        }
      }
    }
    stage('Build Container') {
      when {
        anyOf {
          branch 'master'
          branch 'development'
          branch 'release'
        }
        beforeAgent true
      }
      agent {
        label 'docker'
      }
      stages {
        stage('Docker build') {
          steps {
            office365ConnectorSend message:"Build started ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", status: "Started", color: "999999", webhookUrl: devopsWebhook
            sh "docker build . -t ${repository}:${appVersion}"
          }
          post {
            failure {
              script {
                if("${env.BRANCH_NAME}" == 'master' || "${env.BRANCH_NAME}" == 'development' || "${env.BRANCH_NAME}" == 'release') {
                  office365ConnectorSend message: "Build Failed! ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
                }
              }
            }
          }
        }
        stage('Docker push') {
          steps {
            ecrLogin()
            sh "docker push ${repository}:${appVersion}"
          }
        }
      }
    }
    stage('Deploy to Test') {
      when {
        expression { return params.deployToTest }
      }
      agent {
        label 'docker'
      }
      stages {
        stage('Build Migrations docker image') {
          steps {
            buildMigrationsdockerImage()
          }
        }
        stage('Liquibase migration') {
          steps {
            namedLiquibaseMigration('test')
          }
          post {
            always {
              dir('migrations') {
                archiveArtifacts artifacts: 'migration-plan.sql', fingerprint: false
              }
            }
            failure {
              script {
                if("${env.BRANCH_NAME}" == 'development') {
                  office365ConnectorSend message: "Liquibase Migration for Test Failed! ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
                }
              }
            }
          }
        }
        stage('Deploy') {
          steps {
            deployerDeploy('test')
          }
          post {
            success {
              office365ConnectorSend message: "Deployed to Test ${env.JOB_NAME} - ${env.BUILD_NUMBER} - ${appVersion}", status: "Success", color: "50df16", webhookUrl: backendWebhook
            }
          }
        }
        stage('DeployRules') {
          steps {
            deployerDeployRules('test')
          }
          post {
            success {
              office365ConnectorSend message: "Deployed Test Rules worker ${env.JOB_NAME} - ${env.BUILD_NUMBER} - ${getAppVersion()}", status: "Success", color: "50df16", webhookUrl: backendWebhook
            }
          }
        }
        stage('DeployCalcs') {
          steps {
            deployerDeployCalcs('test')
          }
          post {
            success {
              office365ConnectorSend message: "Deployed Test Calcs Worker ${env.JOB_NAME} - ${env.BUILD_NUMBER} - ${getAppVersion()}", status: "Success", color: "50df16", webhookUrl: backendWebhook
            }
          }
        }
      }
    }
    stage('Deploy to Stage') {
      when {
        expression { return params.deployToStage }
      }
      agent {
        label 'docker'
      }
      stages {
        stage('Build Migrations docker image') {
          steps {
            buildMigrationsdockerImage()
          }
        }
        stage('Database Wipe') {
          when {
            expression { return params.wipeStageDatabase }
          }
          steps {
            sh """
              docker run --rm --entrypoint='' \
                -w /work \
                -v \$(pwd)/wipeStageDB.sh:/work/wipeStageDB.sh \
                -e AWS_REGION='${region}' \
                -e AWS_ENV_PATH='/mgmt/jenkins/${stageEnv}/${appName}/' \
                  local/migrations \
                    ./wipeStageDB.sh
            """
          }
        }
        stage('Liquibase migration') {
          steps {
            namedLiquibaseMigration('stage')
          }
          post {
            always {
              dir('migrations') {
                archiveArtifacts artifacts: 'migration-plan.sql', fingerprint: false
              }
            }
            failure {
              script {
                if("${env.BRANCH_NAME}" == 'development') {
                  office365ConnectorSend message: "Liquibase Migration for Stage Failed! ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
                }
              }
            }
          }
        }
        stage('Deploy') {
          steps {
            deployerDeploy('stage')
          }
          post {
            success {
              office365ConnectorSend message: "Deployed to Stage ${env.JOB_NAME} - ${env.BUILD_NUMBER} - ${appVersion}", status: "Success", color: "50df16", webhookUrl: backendWebhook
            }
          }
        }
      }
    }
  }
  post {
    failure {
      script {
        if("${env.BRANCH_NAME}" == 'master' || "${env.BRANCH_NAME}" == 'development' || "${env.BRANCH_NAME}" == 'release') {
          office365ConnectorSend message: "CI Pipeline Failed! ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Failure", color: "d00000", webhookUrl: buildfailureWebhook
        }
      }
    }
    unstable {
      script {
        if("${env.BRANCH_NAME}" == 'master' || "${env.BRANCH_NAME}" == 'development' || "${env.BRANCH_NAME}" == 'release') {
          office365ConnectorSend message: "CI Pipeline is unstable. ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Unstable", color: "ffcc00", webhookUrl: devopsWebhook
        }
      }
    }
    aborted {
      script {
        if("${env.BRANCH_NAME}" == 'master' || "${env.BRANCH_NAME}" == 'development' || "${env.BRANCH_NAME}" == 'release') {
          office365ConnectorSend message: "CI Pipeline Aborted! ${env.JOB_NAME} - ${env.BUILD_NUMBER}", status: "Aborted", color: "999999", webhookUrl: buildfailureWebhook
        }
      }
    }
  }
}
