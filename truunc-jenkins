#!/bin/bash

# Set environment variables for AWS CLI
export AWS_REGION="your-aws-region"

# Function to get parameter from AWS Parameter Store
get_parameter() {
    aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text
}

# Get DB credentials from AWS Parameter Store
DB_USERNAME=$(get_parameter "mgmt/jenkins/test/db-username")
DB_PASSWORD=$(get_parameter "mgmt/jenkins/test/db-password")

# Define the database connection details
DB_HOST="your-db-host"
DB_PORT="5432" # Default PostgreSQL port
DB_NAME="test-highwire-current" # Change this for other environments

# Execute TRUNCATE commands
psql -h "$DB_HOST" -U "$DB_USERNAME" -d "$DB_NAME" -c "
TRUNCATE TABLE public.batch_job_execution CASCADE;
TRUNCATE TABLE public.batch_job_execution_context CASCADE;
TRUNCATE TABLE public.batch_job_execution_params CASCADE;
TRUNCATE TABLE public.batch_job_instance CASCADE;
TRUNCATE TABLE public.batch_step_execution CASCADE;
TRUNCATE TABLE public.batch_step_execution_context CASCADE;
" --password="$DB_PASSWORD"




=======================

# Get environment parameter
ENVIRONMENT=$1

# Set DB_NAME based on the environment
if [ "$ENVIRONMENT" == "test" ]; then
    DB_NAME="test-highwire-current"
elif [ "$ENVIRONMENT" == "stage" ]; then
    DB_NAME="stage-highwire-current"
elif [ "$ENVIRONMENT" == "preprod" ]; then
    DB_NAME="preprod-highwire-current"
else
    echo "Invalid environment specified."
    exit 1
fi

# The rest of the script remains the same...
==================================================




Step 5: Configure Jenkins Job
Add Build Step:

If you are using a Freestyle project, add a "Execute shell" build step and paste the script above.
If you are using a Pipeline, you can use the sh step to run the script.
Set Environment Variables:

Make sure to set the necessary environment variables for AWS CLI and PostgreSQL connection details.
Step 6: Schedule the Job
Configure Build Triggers:
In the job configuration, scroll down to "Build Triggers".
Check "Build periodically" and set a cron schedule (e.g., H 0 * * 0 for every Sunday at midnight).
Step 7: Test the Job
Run the Job:
Manually trigger the job to ensure it works as expected.
Check the console output for any errors and verify that the tables are truncated.
Step 8: Repeat for Other Environments
You can either create separate jobs for each environment (test, stage, preprod) or modify the script to accept an environment parameter and run the appropriate commands based on that.

Example for Multiple Environments
If you want to handle multiple environments in a single job, you can modify the script to accept an environment parameter:

bash
Insert Code
Run
Copy code
# Get environment parameter
ENVIRONMENT=$1

# Set DB_NAME based on the environment
if [ "$ENVIRONMENT" == "test" ]; then
    DB_NAME="test-highwire-current"
elif [ "$ENVIRONMENT" == "stage" ]; then
    DB_NAME="stage-highwire-current"
elif [ "$ENVIRONMENT" == "preprod" ]; then
    DB_NAME="preprod-highwire-current"
else
    echo "Invalid environment specified."
    exit 1
fi

# The rest of the script remains the same...
You can then call this script with the environment as an argument in Jenkins.

Conclusion
By following these steps, you can successfully schedule and run the TRUNCATE queries on your PostgreSQL databases using Jenkins. Make sure to test thoroughly and monitor the job for any issues.
