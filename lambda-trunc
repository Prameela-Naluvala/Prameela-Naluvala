import psycopg2
import os

# Database configuration for multiple environments
DB_CONFIGS = [
    {"host": "test-rds-endpoint", "database": "db_name", "user": "username", "password": "password"},
    {"host": "stage-rds-endpoint", "database": "db_name", "user": "username", "password": "password"},
    {"host": "prod-rds-endpoint", "database": "db_name", "user": "username", "password": "password"},
    {"host": "transition-rds-endpoint", "database": "db_name", "user": "username", "password": "password"},
]

TRUNCATE_QUERIES = [
    "TRUNCATE TABLE public.batch_job_execution CASCADE;",
    "TRUNCATE TABLE public.batch_job_execution_context CASCADE;",
    "TRUNCATE TABLE public.batch_job_execution_params CASCADE;",
    "TRUNCATE TABLE public.batch_job_instance CASCADE;",
    "TRUNCATE TABLE public.batch_step_execution CASCADE;",
    "TRUNCATE TABLE public.batch_step_execution_context CASCADE;"
]

def lambda_handler(event, context):
    for config in DB_CONFIGS:
        try:
            conn = psycopg2.connect(**config)
            cursor = conn.cursor()
            for query in TRUNCATE_QUERIES:
                cursor.execute(query)
            conn.commit()
            cursor.close()
            conn.close()
            print(f"Truncate successful for {config['host']}")
        except Exception as e:
            print(f"Failed for {config['host']}: {str(e)}")
